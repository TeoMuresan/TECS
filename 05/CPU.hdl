// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/*
 * instruction[16] = i xxa c1c2c3c4c5c6 d1d2d3 j1j2j3 where:
 * 	- i=instruction[15];
 *	- xx: ignored bits;
 * 	- a=instruction[12];
 * 	- comp=instruction[6..11];
 * 	- dest=instruction[3..5];
 * 	- jump=instruction[0..2].
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=noti);
	//Aload=!ivd1.
	Or(a=noti, b=instruction[5], out=Aload);
	//Aload=i&d2.
	And(a=instruction[15], b=instruction[4], out=Dload);
	//If i=0, there is nothing to compute.
	//So ALU simply outputs the constant 0 (control bits: 101010).
	Or(a=noti, b=instruction[11], out=zx);
	Or(a=noti, b=instruction[9], out=zy);
	Or(a=noti, b=instruction[7], out=f);
	And(a=instruction[15], b=instruction[10], out=nx);
	And(a=instruction[15], b=instruction[8], out=ny);
	And(a=instruction[15], b=instruction[6], out=no);
	PCload(j1=instruction[2], j2=instruction[1], j3=instruction[0], 
		zr=zr, ng=ng, out=pcLoadTemp);
	//If i=0, pcLoad should be 0.
	And(a=instruction[15], b=pcLoadTemp, out=pcLoad);
	//If i=0, writeM should be 0.
	//writeM=i&d3.
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	Mux16(a=outMpin, b=instruction, sel=noti, out=inA);	
	ARegister(in=inA, load=Aload, out=outA, out[0..14]=addressM);	
	DRegister(in=outMpin, load=Dload, out=outD);
	Mux16(a=outA, b=inM, sel=instruction[12], out=AorM);
	ALU(x=outD, y=AorM, zx=zx, nx=nx, zy=zy, 
		ny=ny, f=f, no=no, out=outM, out=outMpin,
		zr=zr, ng=ng);
	PC(in=outA, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);	
}