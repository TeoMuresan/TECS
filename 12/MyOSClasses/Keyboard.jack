// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {	
    /** Initializes the keyboard. */
    function void init() {
		return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(24576);
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
		var char c, key;
		
		// Display the cursor.
		do Output.printChar(0);
		
		let key = 0;
		// While no key is pressed on the keyboard. 
		while(key = 0) {
			// Wait till a key is pressed.
			let key = keyPressed();
		}
		// At this point, key contains the code of the currently pressed key.
		let c = key;
		
		// While a key is pressed.
		while(~(key = 0)) {
			// Wait for the user to let go.
			let key = keyPressed();
		}
		
		// Erase the cursor.
		do Output.backSpace();
		// Print c at the current cursor location.
		do Output.printChar(c);
		
		return c;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
		var String nextLine;
		var char c, newLine, backSpace;
		
		let nextLine = String.new(80);
		do Output.printString(message);
		
		let newLine = String.newLine();
		let backSpace = String.backSpace();
		let c = 0;
		// Read and echo a “line” (until newline).
		while(~(c = newLine)) {			
			let c = readChar();
			if(c = newLine) {
				do Output.printChar(newLine);
			}
			else {
				if(c = backSpace) {									
					// Remove last character from nextLine.
					do nextLine.eraseLastChar();
				}
				else {
					let nextLine = nextLine.appendChar(c);
				}
			}
		}
		
		return nextLine;
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
		var String s;
		var int i;
		
		let s = readLine(message);
		let i = s.intValue();
		do s.dispose();
				
		return i;
    }
}
