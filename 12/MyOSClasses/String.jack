// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field int capacity;
	field Array array;
	field int length;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if (maxLength < 0) {
			do Sys.error(14);
		}
		let capacity = maxLength;
		let length = 0;
		
		if (capacity > 0) {
			let array = Array.new(maxLength);
		}		
		
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (capacity > 0) {
			do Memory.deAlloc(this);
		}
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if ((j < 0) | (j > (length - 1))) {
			do Sys.error(15);
		}
		return array[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if ((j < 0) | (j > (length - 1))) {
			do Sys.error(16);
		}
		let array[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		let length = length + 1;
		if(length > capacity) {
			do Sys.error(17);
		}
		
		let array[length - 1] = c;		
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (length = 0) {
			do Sys.error(18);
		}
		let length = length - 1;
		
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int v, i, d;
		var boolean isNegative;
		
		if (length = 0) {
			return 0;
		}
		
		let isNegative = false;
		let i = 0;
		if (array[0] = 45) {
			let isNegative = true;
			let i = 1;
		}
		
		let v = 0;
		let d = 0;
		while ((i < length) & (~(d < 0)) & (~(d > 9)))  {
			let d = array[i] - 48;
			let v = v * 10 + d;
			let i = i + 1;
		}
		
		if (isNegative) {
			let v = -v;
		}
		
		return v;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {						
		if (capacity = 0) {
			do Sys.error(19);
		}		
				
		let length = 0;
		if (number < 0) {
			let number = -number;
			// ASCII code for '-'.
			let array[0] = 45;
			let length = 1;
		}
		
		do int2String(number, 1);			
		
		return;
    }

	/** Sets the 'array' field of the current String object to hold a representation of the given number. 
	 *	The array already contains a '-' if n < 0. */
	function void int2String(int n, int index) {
		var int q, lastDigit;
		var char c;
		
		if ((index = capacity) | (index > capacity)) {
			do Sys.error(19);
		}
		
		let q = Math.divide(n,10);
		let lastDigit = n - (q * 10);
		let c = lastDigit + 48;
		
		if (n < 10) {
			let length = length + index;			
		}
		else {			
			do int2String(q, index + 1);
		}
		
		let array[length - index] = c;

		return;		
	}
	
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
